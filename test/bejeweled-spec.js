const { expect } = require('chai');

const Bejeweled = require("../class/bejeweled.js");

describe ('Bejeweled', function () {

  let grid;
  const fruits = ['游볳', '游꼡', '游본', '游꼖', '游꼙'];

  // Add tests for setting up a basic board
  it("sets up a board of the right dimensions filled with fruits", () => {
    grid = Bejeweled.initBejewel(7, 6);
    expect(grid.length).to.be.equal(7);
    expect(grid[0].length).to.be.equal(6);
    let result = grid.every(row => row.every(val => fruits.includes(val)));
    expect(result).to.be.true;
  });

  it("checks for valid moves", () => {
    grid = [
      ['游꼖', '游볳', '游꼙','游꼡', '游꼙', '游꼡','游꼖', '游본'],
      ['游꼙', '游꼙', '游본','游꼖', '游꼖', '游본','游꼡', '游꼙'],
      ['游꼙', '游꼡', '游꼙','游꼙', '游꼙', '游꼖','游본', '游본'],
      ['游본', '游본', '游꼙','游본', '游꼡', '游꼙','游볳', '游꼖'],
      ['游볳', '游본', '游꼖','游본', '游꼡', '游꼙','游꼙', '游볳'],
      ['游볳', '游꼖', '游꼙','游꼖', '游본', '游꼙','游볳', '游꼖'],
      ['游볳', '游꼙', '游본','游꼡', '游꼙', '游꼖','游볳', '游꼙'],
      ['游볳', '游본', '游꼡','游볳', '游꼡', '游꼡','游볳', '游꼡']];
    let result = Bejeweled.checkForMatches(grid);
    expect(result).to.not.be.false;
    expect(result.length).to.be.equal(13);
    expect(result).to.deep.include({ row: 6, col: 0 });
    expect(result).to.not.deep.include({ row: 0, col: 0 });
  });

  it("checks when there are no matches left", () => {
    grid = [
      ['游꼖', '游볳', '游꼙','游꼡', '游꼙', '游꼡','游꼖', '游본'],
      ['游꼙', '游꼙', '游본','游꼖', '游꼖', '游본','游꼡', '游꼙'],
      ['游꼙', '游꼡', '游꼙','游볳', '游꼙', '游꼖','游본', '游본'],
      ['游본', '游본', '游꼙','游본', '游꼡', '游꼡','游볳', '游꼖'],
      ['游볳', '游본', '游꼖','游본', '游꼡', '游꼙','游꼙', '游볳'],
      ['游본', '游꼖', '游꼙','游꼖', '游본', '游꼙','游꼖', '游꼖'],
      ['游볳', '游꼙', '游본','游꼡', '游꼙', '游꼖','游볳', '游꼙'],
      ['游볳', '游본', '游꼡','游볳', '游꼡', '游꼡','游볳', '游꼡']];
      let result = Bejeweled.checkForMatches(grid);
      expect(result).to.be.false;
  });

  it("should swap gems", () => {
    grid = [
      ['游꼖', '游볳', '游꼙','游꼡', '游꼙', '游꼡','游꼖', '游본'],
      ['游꼙', '游꼙', '游본','游꼖', '游꼖', '游본','游꼡', '游꼙'],
      ['游꼙', '游꼡', '游꼙','游볳', '游꼙', '游꼖','游본', '游본'],
      ['游본', '游본', '游꼙','游본', '游꼡', '游꼡','游볳', '游꼖'],
      ['游볳', '游본', '游꼖','游본', '游꼡', '游꼙','游꼙', '游볳'],
      ['游본', '游꼖', '游꼙','游꼖', '游본', '游꼙','游꼖', '游꼖'],
      ['游볳', '游꼙', '游본','游꼡', '游꼙', '游꼖','游볳', '游꼙'],
      ['游볳', '游본', '游꼡','游볳', '游꼡', '游꼡','游볳', '游꼡']];
    Bejeweled.swap(grid, [4, 0], [5, 0]);
    expect(grid).to.deep.equal([
      ['游꼖', '游볳', '游꼙','游꼡', '游꼙', '游꼡','游꼖', '游본'],
      ['游꼙', '游꼙', '游본','游꼖', '游꼖', '游본','游꼡', '游꼙'],
      ['游꼙', '游꼡', '游꼙','游볳', '游꼙', '游꼖','游본', '游본'],
      ['游본', '游본', '游꼙','游본', '游꼡', '游꼡','游볳', '游꼖'],
      ['游본', '游본', '游꼖','游본', '游꼡', '游꼙','游꼙', '游볳'],
      ['游볳', '游꼖', '游꼙','游꼖', '游본', '游꼙','游꼖', '游꼖'],
      ['游볳', '游꼙', '游본','游꼡', '游꼙', '游꼖','游볳', '游꼙'],
      ['游볳', '游본', '游꼡','游볳', '游꼡', '游꼡','游볳', '游꼡']])
  })

  it("should remove matched gems", () => {
    grid = [
      ['游본', '游본', '游꼙','游본', '游꼡'],
      ['游본', '游본', '游꼖','游본', '游꼡'],
      ['游볳', '游꼖', '游꼙','游꼖', '游본'],
      ['游볳', '游꼙', '游본','游꼡', '游꼙'],
      ['游볳', '游본', '游꼡','游볳', '游꼡']]
    let result = Bejeweled.checkForMatches(grid);
    Bejeweled.removeMatches(grid, result, 1);
    expect(grid).to.deep.equal([
      ['游본', '游본', '游꼙','游본', '游꼡'],
      ['游본', '游본', '游꼖','游본', '游꼡'],
      [' ', '游꼖', '游꼙','游꼖', '游본'],
      [' ', '游꼙', '游본','游꼡', '游꼙'],
      [' ', '游본', '游꼡','游볳', '游꼡']])
  })

  it("should make fruits drop down", () => {
    grid = [
      ['游본', '游본', '游꼙','游본', '游꼡'],
      ['游본', '游본', '游꼖','游본', '游꼡'],
      [' ', '游꼖', '游꼙','游꼖', '游본'],
      [' ', '游꼙', '游본','游꼡', '游꼙'],
      [' ', '游본', '游꼡','游볳', '游꼡']];
    Bejeweled.gravityFruits(grid);
    expect(grid).to.deep.equal([
      [' ', '游본', '游꼙','游본', '游꼡'],
      [' ', '游본', '游꼖','游본', '游꼡'],
      [' ', '游꼖', '游꼙','游꼖', '游본'],
      ['游본', '游꼙', '游본','游꼡', '游꼙'],
      ['游본', '游본', '游꼡','游볳', '游꼡']])
  })

  it("should fill up the grid with fruits again", () => {
    grid = [
      [' ', '游본', '游꼙','游본', '游꼡'],
      [' ', '游본', '游꼖','游본', '游꼡'],
      [' ', '游꼖', '游꼙','游꼖', '游본'],
      ['游본', '游꼙', '游본','游꼡', '游꼙'],
      ['游본', '游본', '游꼡','游볳', '游꼡']]
    Bejeweled.newFruits(grid);
    let result = grid.every(row => row.every(val => fruits.includes(val)));
    expect(result).to.be.true;
  })

  it("should tell if there are no more valid moves", () => {
    grid = [
      ['游꼖', '游볳', '游꼙'],
      ['游꼙', '游꼡', '游본'],
      ['游꼙', '游꼡', '游꼙']];
    let result = Bejeweled.checkForMoves(grid);
    expect(result).to.be.false;
  })

  // Add tests for swaps that set up combos

});
